---
title: "Airbnb Data Analysis and Visualization Project"
format: html
editor: visual
---

**New York City Airbnb Data**

Airbnb, Inc is an American company that operates an online marketplace for lodging, primarily homestays for vacation rentals, and tourism activities. Based in San Francisco, California, the platform is accessible via website and mobile app. Airbnb does not own any of the listed properties; instead, it profits by receiving commission from each booking. The company was founded in 2008. Airbnb is a shortened version of its original name, AirBedandBreakfast.com.

![](AIRBNB.webp){width="384"}

**Context**

Since 2008, guests and hosts have used Airbnb to travel in a more unique, personalized way. As part of the Airbnb Inside initiative, this dataset describes the listing activity of homestays in New York City [Kaggle:Airbnb](https://www.kaggle.com/datasets/arianazmoudeh/airbnbopendata/data)

**Dataset**

The following Airbnb activity is included in this New York dataset:

Listings, including full descriptions and average review score Reviews, including unique id for each reviewer and detailed comments Calendar, including listing id and the price and availability for that day

| Column | **Description** | **Data type** |
|------------------------|------------------------|------------------------|
| id | Unique id of each listing | numeric |
| name | Name of the airbnb listing | text |
| Host id | Unique id for the host | numeric |
| host_identity_verified | Whether the identify of the host is verified or not | Categorical |
| host name | Name of the host | text |
| neighbourhood group | District where the property is | Categorical |
| neighbourhood | Area or locality of the property | Categorical |
| lat | Latitude | numeric |
| long | Longitude | numeric |
| country | Country where the property is | Categorical |
| country code | ISO country code | Categorical |
| instant_bookable | If the property can be instantly booked or not | Categorical |
| cancellation_policy | Cancellation policy for the booking | Categorical |
| room type | Type of room | Categorical |
| Construction year | Year when the property was constructed | numeric |
| price | Price per night | numeric |
| service fee | Additional service fee | numeric |
| minimum nights | Minimum number of nights required for booking | numeric |
| number of reviews | Total number of reviews | numeric |
| last review | Last review date | date |
| reviews per month | Average number of reviews per month | numeric |
| review rate number | Rating score based on reviews | numeric |
| calculated host listings count | Total number of listing managed by the host | numeric |
| availability 365 | Number of days the property is available for booking throughout the year | numeric |
| house_rules | Rules defined by the host for their guests | text |
| license | License number for legal compliance of the listing | text |

## **Steps**

### Step 1 - Explore the dataset

```{r}
# install and packages and libraries needed

#install.packages("tidyverse")
#install.packages("ggplot")
#install.packages("dplyr") 
#install.packages("gtExtras")
#install.packages("leaflet")


```

```{r, echo=FALSE}

library(tidyverse)
library(ggplot2)
library(dplyr) 
library(gt)
library(gtExtras)
library(stringr)
library(leaflet)
```

```{r}
# Read the dataset
data <- read.csv("Airbnb_Open_Data.csv")

#View(data) # gives the view of entire dataset
```

```{r}
head(data) # first 6 rows 

#tail(data) # last 6 rows
```

```{r}
dim(data) # shape - 102599, 26
```

```{r}
names(data) # names of all the columns
```

```{r}
#str(data) # to check the datatype

glimpse(data) # better than str to see the data
```

```{r}
sum(duplicated(data)) # there are 541 duplicate values
```

Insights -

With the glimpse we can see all the datatypes for the columns.

We can see that price, service fee have character dataype rather than int and last review is also character instead of date

### STEP 2 - DATA CLEANING

```{r}
# next lets drop our dupliacted rows

data <- data %>% 
  distinct() 

dim(data) # 102058 , 26
```

```{r}
# next, lets deal with our null / misisng values
names(data)
```

```{r}
# lets look at the missing values - 
# lets convert all blank rows to NA

data <- data %>% 
  mutate(across(where(is.character), ~na_if(., ""))) 
#View(data)

data %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  pivot_longer(everything(), names_to = "Column", values_to = "Missing Values") %>%
  gt() %>% # neaten the table
  tab_header(title = "Missing Values Across the Dataset") %>%
  cols_align(align = 'left') %>%
  gt_theme_dark()
```

Insights -

The number of missing data differs across the dataset with missing values in 23 columns

We cannot directly remove these, we will perform data manipulation on this

The license column is almost empty. There are 102597 rows are missing, hence this isnt a column that would be useful for us.

There are just 2 rows. We can see what they are, but they are of no use, so lets drop

```{r}
data %>%
  filter(!is.na(license)) %>%
  select(license) 

# drop column license- 
data <- data %>% 
  select(-license)

#View(data)
```

```{r}
# next lets look at the house rules column, there are 51842, almost half missing values
# these rules dont account to any specific need. We can check an individual rule, but its not important for our purpose, so we will drop
data <- data %>% 
  select(-house_rules)
```

Insights -

For remaining columns, let do the cleaning based on the questions we are planning to answer

Data cleaning is based on your problem statement. Whether to drop or do imputation differs according to the question.

For this dataset we will will tackle rest missing values based on the following problems

### STEP 3 - DATA MANIPULATION

```{r}
# first lets start with dealing with our datatype conversion

data <-data %>% 
  mutate(price = as.numeric(str_remove(price, "\\$"))) %>% 
  mutate(service.fee = as.numeric(str_remove(service.fee, "\\$"))) %>% 
  mutate(last.review = as.Date(last.review, format = "%m/%d/%Y"))
#View(data)

```

### STEP 4 - DATA DESCRIBE AND SUMMARY

```{r}

# lets check the summary for our numeric data columns
data %>% 
  select(price, service.fee, minimum.nights, number.of.reviews,
         review.rate.number, reviews.per.month,
         calculated.host.listings.count, availability.365) %>% 
  summary()

## this summary is useful for us to look at the distribution of the dataset
# minimum nights, number of reviews, review rate number and review rate month and calulated.host.listing.count, doesnt have any spread. 
```

### STEP 5 - DATA VISUALIZATION - QUESTIONS

#### QS1 - Let a gt plot summary table for all the numeric columns to see the summary

```{r, echo=FALSE}

data %>%
  select(price, service.fee, minimum.nights, number.of.reviews,
         review.rate.number, reviews.per.month,
         calculated.host.listings.count, availability.365) %>%
  drop_na() %>%  # Drop only for visualization
  gt_plt_summary()

## if we drop all nas, this is how the distribution looks like
```

#### QS 2 - How does the average service fee vary by room type?

```{r, echo=FALSE}

data %>% 
  select(service.fee, room.type) %>% 
  filter(!is.na(service.fee)) %>% 
  group_by(room.type) %>% 
  summarise(avg_fee = round(mean(service.fee, na.rm = TRUE), 2)) %>% 
  gt() 

```

#### QS 3 - What is the distribution of listing prices?

```{r, echo=FALSE}

# lets see what the date range looks like to decide a suitable bin width
range(data$Construction.year, na.rm = TRUE)

data %>% 
  ggplot(aes(Construction.year)) +
  geom_histogram(binwidth = 1, fill = 'steelblue', color = "black") +
  theme_bw() + 
  labs(x = 'Construction years',
       y = "Count",
       title = "Histogram for years when the property was constructed")
```

#### QS 4 - How many listings exist for each neighbourhood group?

```{r, echo=FALSE}

data %>% 
  ggplot(aes(neighbourhood.group))+
  geom_bar(fill = "pink") +
  geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5, size = 3) +  
  theme_classic() +
  labs(x = "Neighbourhood Group",
       y = "Count",
       title = "Listings exist for each neighbourhood group")
```

#### QS 5 - How do service fees vary across different room types?

```{r, echo=FALSE}

data %>% 
  filter(!is.na(service.fee)) %>%  # Remove NAs
  ggplot(aes(x = service.fee)) +
  geom_area(stat = "density", fill = "steelblue",colour = "blue", alpha = 0.6) +
  facet_wrap(~room.type)+
  theme_bw() +
  labs(title = "Area Plot of Service Fees",
       x = "Service Fee",
       y = "Density")
```

#### QS 6 - What is the distribution of listing prices across different neighborhoods?

```{r, echo=FALSE}

data %>% 
  filter(!is.na(price))%>% 
  ggplot(aes(room.type, price)) +
  geom_boxplot() +
  coord_flip()+
  theme_grey() +
  labs(x = "Price",
       y = "Room Type",
       title = "Price according to the Type of Room")
```

#### QS 7 - Do hosts with more listings charge higher prices?

```{r, echo=FALSE}

data %>% 
  filter(!is.na(calculated.host.listings.count) & !is.na(price)) %>%
  ggplot(aes(calculated.host.listings.count, price)) +
  geom_point(colour = "steelblue") +
  labs(x = "Listings", 
       y = "Price", 
       title = "Scatter Plot of Host Listings vs. Price")
```

#### QS 8 - How does the price distribution differ across cancellation policy types?

```{r, echo=FALSE}

data %>%
  filter(!is.na(price) & !is.na(cancellation_policy)) %>%  # Remove missing values
  ggplot(aes(x = cancellation_policy, y = price, fill = cancellation_policy)) +
  geom_violin(alpha = 0.6) +  # Violin plot with transparency
  scale_y_continuous(limits = c(0, 500), oob = scales::squish) +  # Adjust scale to remove extreme outliers
  theme_minimal() +
  labs(
    title = "Price Distribution Across Room Types",
    x = "Room Type",
    y = "Price")
```

#### QS 9 - How has the number of reviews per month changed over time across different room types?

```{r, echo=FALSE}

data %>% 
  filter(!is.na(last.review) & !is.na(reviews.per.month)) %>% 
  ggplot(aes(last.review, reviews.per.month)) +
  geom_point(size = 3) +
  geom_smooth() + 
  facet_wrap(~room.type)+
  theme_bw() +
  labs(title = "Line Graph for reviews based on last review year")
```

#### QS 10 - How do verified vs. unverified hosts vary across boroughs?

```{r, echo=FALSE}

data %>% 
  filter(!is.na(host_identity_verified) & !is.na(neighbourhood.group)) %>% 
  ggplot(aes(x = neighbourhood.group, fill = host_identity_verified)) +
  geom_bar(position = "fill") +  # Use "stack" for absolute counts, "fill" for proportions
  theme_minimal() +
  labs(title = "Proportion of Verified vs. Unverified Hosts Across Boroughs",
       x = "Borough",
       y = "Proportion",
       fill = "Host Verification Status")
```

#### QS 11 - How does the average number of reviews per month vary across different neighborhood groups?

```{r, echo=FALSE}

# lets start by fixing the names of 2 mis spelled names
data %>%
  mutate(neighbourhood.group = case_when(
    neighbourhood.group == "manhatan" ~ "Manhattan",
    neighbourhood.group == "Brooklyn" ~ "brookln",
    TRUE ~ neighbourhood.group )) %>% 
  group_by(neighbourhood.group) %>% 
  summarise(avg_review_per_month = round(mean(reviews.per.month, na.rm = T),2)) %>% 
  gt() 
```

#### QS 12 - How do average price and service fees vary across different neighborhoods in the United States, and are there any geographical patterns visible on the map?

```{r, echo=FALSE}

# Aggregate data
map_data <- data %>%
  filter(country == "United States" & !is.na(neighbourhood)) %>%
  group_by(neighbourhood) %>% 
  summarise(
    avg_price = round(mean(price, na.rm = TRUE), 2),
    avg_service_fee = round(mean(service.fee, na.rm = TRUE), 2),
    lat = mean(lat, na.rm = TRUE),
    lon = mean(long, na.rm = TRUE)
  ) %>%
  filter(!is.na(lat) & !is.na(lon))  # Ensure valid coordinates
head(map_data)

# this will show how the table looks like after groupby
```

```{r, echo=FALSE}

# Create a Leaflet map

leaflet(map_data) %>%
  addTiles() %>%  # Base map
  addAwesomeMarkers(
    ~lon, ~lat,  # Longitude and Latitude
    icon = awesomeIcons(
      icon = "map-marker-alt",  # FontAwesome location pin icon
      library = "fa",  # Use FontAwesome
      markerColor = "blue"  # Set the marker color to blue
    ),
    popup = ~paste0("<b>Neighbourhood: </b>", neighbourhood,
                    "<br><b>Avg Price: $</b>", avg_price,
                    "<br><b>Avg Service Fee: $</b>", avg_service_fee)
  ) %>%
  fitBounds(
    lng1 = min(map_data$lon, na.rm = TRUE), 
    lat1 = min(map_data$lat, na.rm = TRUE), 
    lng2 = max(map_data$lon, na.rm = TRUE), 
    lat2 = max(map_data$lat, na.rm = TRUE)
  )  # Auto-zoom to data bounds
```

If you like to access the code, you can find this project on my [Github](https://github.com/Siddhi1529/Airbnb-R.git)
